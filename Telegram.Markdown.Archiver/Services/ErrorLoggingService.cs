using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Collections.Concurrent;
using System.Text;
using Telegram.Markdown.Archiver.Models.Configuration;

namespace Telegram.Markdown.Archiver.Services;

/// <summary>
/// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ Telegram
/// </summary>
public interface IErrorLoggingService
{
    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –∏ Telegram
    /// </summary>
    /// <param name="exception">–ò—Å–∫–ª—é—á–µ–Ω–∏–µ</param>
    /// <param name="message">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</param>
    /// <param name="context">–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏</param>
    Task LogErrorAsync(Exception exception, string? message = null, string? context = null);

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –∏ Telegram
    /// </summary>
    /// <param name="exception">–ò—Å–∫–ª—é—á–µ–Ω–∏–µ</param>
    /// <param name="message">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</param>
    /// <param name="context">–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏</param>
    Task LogCriticalErrorAsync(Exception exception, string? message = null, string? context = null);

    /// <summary>
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    void StartBackgroundProcessing(CancellationToken cancellationToken);
}

/// <summary>
/// –ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
/// </summary>
public record ErrorMessage(
    DateTime Timestamp,
    string Level,
    string Message,
    string? StackTrace,
    string? Context,
    int Attempts = 0);

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ Telegram
/// </summary>
public class ErrorLoggingService : IErrorLoggingService, IDisposable
{
    private readonly ITelegramService _telegramService;
    private readonly TelegramConfiguration _telegramConfiguration;
    private readonly ErrorLoggingConfiguration _errorLoggingConfiguration;
    private readonly ILogger<ErrorLoggingService> _logger;

    private readonly ConcurrentQueue<ErrorMessage> _messageQueue = new();
    private readonly Timer _retryTimer;
    private readonly SemaphoreSlim _semaphore = new(1, 1);
    private bool _disposed;

    public ErrorLoggingService(
        ITelegramService telegramService,
        IOptions<TelegramConfiguration> telegramConfiguration,
        IOptions<ErrorLoggingConfiguration> errorLoggingConfiguration,
        ILogger<ErrorLoggingService> logger)
    {
        _telegramService = telegramService;
        _telegramConfiguration = telegramConfiguration.Value;
        _errorLoggingConfiguration = errorLoggingConfiguration.Value;
        _logger = logger;

        // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        _retryTimer = new Timer(ProcessMessageQueue, null, TimeSpan.FromSeconds(10), 
            TimeSpan.FromMilliseconds(_errorLoggingConfiguration.RetryDelayMs));
    }

    public async Task LogErrorAsync(Exception exception, string? message = null, string? context = null)
    {
        await LogErrorInternalAsync(exception, "ERROR", message, context);
    }

    public async Task LogCriticalErrorAsync(Exception exception, string? message = null, string? context = null)
    {
        await LogErrorInternalAsync(exception, "CRITICAL", message, context);
    }

    public void StartBackgroundProcessing(CancellationToken cancellationToken)
    {
        // –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä
        _logger.LogInformation("–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω–∞");
    }

    private async Task LogErrorInternalAsync(Exception exception, string level, string? message, string? context)
    {
        try
        {
            // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
            if (level == "CRITICAL")
            {
                _logger.LogCritical(exception, "{Message} | –ö–æ–Ω—Ç–µ–∫—Å—Ç: {Context}", message ?? exception.Message, context ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
            }
            else
            {
                _logger.LogError(exception, "{Message} | –ö–æ–Ω—Ç–µ–∫—Å—Ç: {Context}", message ?? exception.Message, context ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
            }

            // –ï—Å–ª–∏ Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
            if (!_errorLoggingConfiguration.EnableTelegramLogging)
            {
                return;
            }

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
            var errorMessage = new ErrorMessage(
                DateTime.Now,
                level,
                message ?? exception.Message,
                exception.ToString(),
                context
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            if (_messageQueue.Count < _errorLoggingConfiguration.MaxQueueSize)
            {
                _messageQueue.Enqueue(errorMessage);
                _logger.LogDebug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram");

                // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É
                await TrySendToTelegramAsync(errorMessage);
            }
            else
            {
                _logger.LogWarning("–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
            }
        }
        catch (Exception ex)
        {
            // –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤–ª–∏—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ");
        }
    }

    private async Task TrySendToTelegramAsync(ErrorMessage errorMessage)
    {
        try
        {
            await _semaphore.WaitAsync();

            var telegramMessage = FormatTelegramMessage(errorMessage);
            await _telegramService.SendTextMessageAsync(_telegramConfiguration.UserId, telegramMessage);

            _logger.LogDebug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
        }
        catch (Exception ex)
        {
            _logger.LogDebug(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏");
        }
        finally
        {
            _semaphore.Release();
        }
    }

    private void ProcessMessageQueue(object? state)
    {
        if (_disposed) return;

        Task.Run(async () =>
        {
            var processedMessages = new List<ErrorMessage>();

            while (_messageQueue.TryDequeue(out var errorMessage))
            {
                try
                {
                    if (errorMessage.Attempts >= _errorLoggingConfiguration.MaxRetryAttempts)
                    {
                        _logger.LogWarning("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ Telegram");
                        continue;
                    }

                    await TrySendToTelegramAsync(errorMessage);
                    
                    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
                    processedMessages.Add(errorMessage);
                }
                catch
                {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    var updatedMessage = errorMessage with { Attempts = errorMessage.Attempts + 1 };
                    if (updatedMessage.Attempts < _errorLoggingConfiguration.MaxRetryAttempts)
                    {
                        _messageQueue.Enqueue(updatedMessage);
                    }
                }
            }
        });
    }

    private string FormatTelegramMessage(ErrorMessage errorMessage)
    {
        var sb = new StringBuilder();
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∂–∏
        var emoji = errorMessage.Level == "CRITICAL" ? "üö®" : "‚ùå";
        sb.AppendLine($"{emoji} **{errorMessage.Level}** | {errorMessage.Timestamp:dd.MM.yyyy HH:mm:ss}");
        sb.AppendLine();

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!string.IsNullOrEmpty(errorMessage.Context))
        {
            sb.AppendLine($"**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {errorMessage.Context}");
            sb.AppendLine();
        }

        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        sb.AppendLine($"**–û—à–∏–±–∫–∞:** {errorMessage.Message}");
        sb.AppendLine();

        // –°—Ç–µ–∫-—Ç—Ä–µ–π—Å (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
        if (!string.IsNullOrEmpty(errorMessage.StackTrace))
        {
            sb.AppendLine("**–°—Ç–µ–∫-—Ç—Ä–µ–π—Å:**");
            var stackTrace = errorMessage.StackTrace;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å–∞
            var maxStackTraceLength = _errorLoggingConfiguration.MaxMessageLength - sb.Length - 100;
            if (stackTrace.Length > maxStackTraceLength)
            {
                stackTrace = stackTrace.Substring(0, maxStackTraceLength) + "...";
            }
            
            sb.AppendLine($"```");
            sb.AppendLine(stackTrace);
            sb.AppendLine("```");
        }

        var result = sb.ToString();
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram
        if (result.Length > _errorLoggingConfiguration.MaxMessageLength)
        {
            result = result.Substring(0, _errorLoggingConfiguration.MaxMessageLength - 3) + "...";
        }

        return result;
    }

    public void Dispose()
    {
        if (_disposed) return;
        
        _disposed = true;
        _retryTimer?.Dispose();
        _semaphore?.Dispose();
        
        GC.SuppressFinalize(this);
    }
}